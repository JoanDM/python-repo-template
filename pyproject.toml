[tool.black]
line-length = 88
target-version = ['py39']

[tool.isort]
# repo-specific excludes
skip_glob = ["venv/*"]
# settings to match behavior of black formatting
profile = "black"

[tool.pylint.master]
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-whitelist = ["cv2"]
# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore = ["venv", "pe_utils/annotation_tools/labelbox"]
# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
# ignore-patterns=
# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=
# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs = 0
# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results = 100
# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins = ["pylint.extensions.docparams", "pylint.extensions.mccabe"]
# Pickle collected data for later comparisons.
persistent = "no"
# Specify a configuration file.
#rcfile=
# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = "yes"
# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = "no"

[tool.pylint.messages_control]
# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
# confidence=
# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = "all"
# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable = [
  # see possible values on https://docs.pylint.org/en/latest/user_guide/message-control.html
  ### categories
  "E",
  "F",
  ### groups
  # http://pylint.pycqa.org/en/latest/technical_reference/features.html
  "async",
  # basic
  "W0150",
  "W0199",
  "W0129",
  "W0127",
  "W0143",
  "W0102",
  "W0109",
  "W0120",
  "W0106",
  "W0124",
  "W0111",
  "W0128",
  "W0104",
  "W0108",
  "W0123",
  "W0107",
  "W0101",
  "W0122",
  "W0125",
  "W0126",
  "R0124",
  "C0144",
  "C0121",
  "C0112",
  "C0123",
  "R0123",
  "classes",
  "exceptions",
  # logging
  "W1201",
  "imports",
  # miscellaneous
  "W0511",
  "newstyle",
  "stdlib",
  "string",
  "typecheck",
  # variables
  "W0640",
  "W0601",
  "W0642",
  "W0641",
  "W0623",
  "W0614",
  "W0602",
  "W0631",
  "W0603",
  "W0604",
  "W0622",
  ### extensions
  # see http://pylint.pycqa.org/en/latest/technical_reference/extensions.html
  # extension: parameter_documentation
  "W9011",
  "W9015",
  "W9017",
  "W9018",
  # extension: design
  "R1260"
]

[tool.pylint.reports]
# python expression which should return a note less than 10 (10 is the highest
# note). you have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. this is used by the global evaluation report
# (rp0004).
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
# template used to display messages. this is a python new-style format string
# used to format the message information. see doc for all details.
#msg-template=
# set the output format. available formats are text, parseable, colorized, json
# and msvs (visual studio). you can also give a reporter class, e.g.
# mypackage.mymodule.myreporterclass.
output-format = "text"
# tells whether to display a full report or only the messages.
reports = "no"
# activate the evaluation score.
score = "yes"

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5
# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions = "sys.exit"

[tool.pylint.logging]
# Format style used to check logging format string. `old` means using %
# formatting, while `new` is for `{}` formatting.
logging-format-style = "old"
# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = "logging"

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = "FIXME"
# This must be set to a value, otherwise, it will not work in combination
# with notes-rgx.
#
# That is because the two settings are combined as
#     if self.config.notes_rgx:
#         regex_string = r"#\s*(%s|%s)\b" % (notes, self.config.notes_rgx)
#
# Thus, we detect one case here and other cases with notes-rgx.
# Regular expression of note tags to take in consideration.
notes-rgx = 'TODO(?!:{0,1}\s{1,2}(SDK|SHELF)-[0-9]+)'

# This detects only TODOs that come without a Jira ticket
# The allowed, not detected TODOs are of type
# - TODO basename-123
# - TODO: basename-123
# where 'basename' is either SDK or SHELF
# and '123' is any integer number
[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = "contextlib.contextmanager"
# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
#generated-members=
# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members = "yes"
# Tells whether to warn about missing members when the owner of the attribute
# is inferred to be None.
ignore-none = "yes"
# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
   ignore-on-opaque-inference = "yes"
# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules = ["cv2", "lxml", "tqdm", "Levenshtein", "google.cloud.vision", "scandit_parser", "scanditsdk"]
# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint = "yes"
# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1
# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
# additional-builtins=
# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = "yes"
# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = ["cb_", "_cb"]
# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names = '_.*|^ignored_|^unused_'
# Tells whether we should check for unused import in __init__ files.
init-import = "no"
# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "builtins",
  "io"
]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format=
# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines='^\s*(# )?<?https?://\S+>?$'

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = '    '
# Maximum number of characters on a single line.
# Black formatting tool limits code lines to 88 characters, but does not
# constrain comment lines.
max-line-length = 120
# Maximum number of lines in a module.
max-module-lines = 1000
# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check = ["trailing-comma", "dict-separator"]
# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = "no"
# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = "no"

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"
# Regular expression matching correct argument names. Overrides argument-
# naming-style.
#argument-rgx=
# Naming style matching correct attribute names.
attr-naming-style = "snake_case"
# Regular expression matching correct attribute names. Overrides attr-naming-
# style.
#attr-rgx=
# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"
# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style.
#class-attribute-rgx=
# Naming style matching correct class names.
class-naming-style = "PascalCase"
# Regular expression matching correct class names. Overrides class-naming-
# style.
#class-rgx=
# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"
# Regular expression matching correct constant names. Overrides const-naming-
# style.
#const-rgx=
# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = 10
# Naming style matching correct function names.
function-naming-style = "snake_case"
# Regular expression matching correct function names. Overrides function-
# naming-style.
#function-rgx=
# Good variable names which should always be accepted, separated by a comma.
good-names = ["i", "j", "k", "ex", "Run", "_"]
# Include a hint for the correct naming format with invalid-name.
include-naming-hint = "no"
# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"
# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style.
#inlinevar-rgx=
# Naming style matching correct method names.
method-naming-style = "snake_case"
# Regular expression matching correct method names. Overrides method-naming-
# style.
#method-rgx=
# Naming style matching correct module names.
module-naming-style = "snake_case"
# Regular expression matching correct module names. Overrides module-naming-
# style.
#module-rgx=
# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
#name-group=
# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx = '^_|Test'
# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes = "abc.abstractproperty"
# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-
# naming-style.
#variable-rgx=
[tool.pylint.string]
# This flag controls whether the implicit-str-concat-in-sequence should
# generate a warning on implicit string concatenation in sequences defined over
# several lines.
check-str-concat-over-line-jumps = "no"

[tool.pylint.imports]
# allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = "no"
# analyse import fallback blocks. this can be used to support both python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = "no"
# deprecated modules which should not be used, separated by a comma.
deprecated-modules = ["optparse", "tkinter.tix"]
# force import order to recognize a module as part of a third party library.
known-third-party = "enchant"

[tool.pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp"]
# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = "cls"
# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = "cls"

[tool.pylint.parameter_documentation]
# Whether to accept totally missing parameter documentation in the docstring of
# a function that has parameters.
accept-no-param-doc = "yes"
# Whether to accept totally missing raises documentation in the docstring of a
# function that raises an exception.
accept-no-raise-doc = "yes"
# Whether to accept totally missing return documentation in the docstring of a
# function that returns a statement.
accept-no-return-doc = "yes"
# Whether to accept totally missing yields documentation in the docstring of a
# generator.
accept-no-yields-doc = "yes"
# If the docstring type cannot be guessed the specified docstring type will be
# used.
default-docstring-type = "sphinx"

[tool.pylint.design]
# McCabe complexity cyclomatic threshold
max-complexity = 15

[tool.pylint.exceptions]
# Exceptions that will emit a warning when being caught. Defaults to
# "BaseException, Exception".
overgeneral-exceptions = "BaseException"

[tool.pytest.ini_options]
# ignore selected warnings that are common in 3rd-party packages
filterwarnings = '''ignore:.*Using or importing the ABCs from 'collections' instead of from 'collections.abc'.*:DeprecationWarning'''
norecursedirs = [
  # environment files
  "venv/*",
  # source files
  "scripts"
]
addopts = [
  # trigger error for unknown markers
  "--strict-markers",
]
